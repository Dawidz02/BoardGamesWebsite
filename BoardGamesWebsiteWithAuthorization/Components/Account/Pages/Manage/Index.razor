@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using BoardGamesWebsiteWithAuthorization.Data
@using Microsoft.EntityFrameworkCore

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>Profile</PageTitle>

<h3>Profile</h3>
<StatusMessage />

<div class="row">
    <div class="col-md-6">
        <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <input type="text" value="@username" class="form-control" placeholder="Please choose your username." disabled />
                <label for="username" class="form-label">Username</label>
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.WebUserName" class="form-control" placeholder="Please enter your username." />
                <label for="web-user-name" class="form-label">WebUserName</label>
                <ValidationMessage For="() => Input.WebUserName" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Name" class="form-control" placeholder="Please enter your name." />
                <label for="name" class="form-label">Name</label>
                <ValidationMessage For="() => Input.Name" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.SecondName" class="form-control" placeholder="Please enter your secondname." />
                <label for="second-name" class="form-label">SecondName</label>
                <ValidationMessage For="() => Input.SecondName" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.PhoneNumber" class="form-control" placeholder="Please enter your phone number." />
                <label for="phone-number" class="form-label">Phone number</label>
                <ValidationMessage For="() => Input.PhoneNumber" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputDate @bind-Value="Input.DateOfBirth" class="form-control" placeholder="Please enter your date of birth." />
                <label for="date-of-birth" class="form-label">Date of birth</label>
                <ValidationMessage For="() => Input.DateOfBirth" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Adress" class="form-control" placeholder="Please enter your Adress (city)." />
                <label for="adress" class="form-label">Adress</label>
                <ValidationMessage For="() => Input.Adress" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.PrefferedLocalization" class="form-control" placeholder="Please enter your Preffered Localization (city)." />
                <label for="preffered-localization" class="form-label">PrefferedLocalization</label>
                <ValidationMessage For="() => Input.PrefferedLocalization" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.UserPhoto" class="form-control" placeholder="Please enter your photo url." />
                <label for="user-photo" class="form-label">UserPhoto</label>
                <ValidationMessage For="() => Input.UserPhoto" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.UserDescription" class="form-control" placeholder="Please enter your description." />
                <label for="description" class="form-label">Description</label>
                <ValidationMessage For="() => Input.UserDescription" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Save</button>
        </EditForm>
    </div>
</div>

@code {
    private ApplicationUser user = default!;
    private string? username;
    private string? phoneNumber;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        Input ??= new();

        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        username = await UserManager.GetUserNameAsync(user);
        phoneNumber = await UserManager.GetPhoneNumberAsync(user);

        Input.UserName ??= user.UserName;
        Input.WebUserName ??= user.WebUserName;
        Input.Name ??= user.Name;
        Input.SecondName ??= user.SecondName;
        Input.PhoneNumber ??= phoneNumber;
        Input.DateOfBirth ??= user.DateOfBirth;
        Input.Adress ??= user.Adress;
        Input.PrefferedLocalization ??= user.PrefferedLocalization;
        Input.UserDescription ??= user.UserDescription;
        Input.UserPhoto ??= user.UserPhoto;
    }

    private async Task OnValidSubmitAsync()
    {
        // Sprawdzenie, czy WebUserName już istnieje
        var existingUser = await UserManager.Users
            .Where(u => u.WebUserName == Input.WebUserName && u.Id != user.Id) // Nie sprawdzaj swojego użytkownika
            .FirstOrDefaultAsync();

        if (existingUser != null)
        {
            // Jeśli WebUserName już istnieje, dodaj błąd do ModelState
            RedirectManager.RedirectToCurrentPageWithStatus("Error: WebUserName is already taken.", HttpContext);
            return;
        }

        user.UserName = Input.UserName;
        user.PhoneNumber = Input.PhoneNumber;
        user.Name = Input.Name;
        user.SecondName = Input.SecondName;
        user.DateOfBirth = Input.DateOfBirth;
        user.Adress = Input.Adress;
        user.PrefferedLocalization = Input.PrefferedLocalization;
        user.UserDescription = Input.UserDescription;
        user.UserPhoto = Input.UserPhoto;
        user.WebUserName = Input.WebUserName;

        var updateResult = await UserManager.SetPhoneNumberAsync(user, Input.PhoneNumber);
        if (!updateResult.Succeeded)
        {
            RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to uptade the user.", HttpContext);
        }

        await SignInManager.RefreshSignInAsync(user);
        RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated", HttpContext);
    }

    private sealed class InputModel
    {
        [Phone]
        [Display(Name = "Phone number")]
        public string? PhoneNumber { get; set; }
        public string? UserName { get; set; }

        public string? Name { get; set; }
        public string? SecondName { get; set; }
        public DateOnly? DateOfBirth { get; set; }
        public string? Adress { get; set; }
        public string? PrefferedLocalization { get; set; }
        public string? UserDescription { get; set; }
        public string? UserPhoto { get; set; }
        public string? WebUserName { get; set; }
    }
}
