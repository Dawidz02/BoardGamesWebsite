@page "/friends"
@rendermode InteractiveServer

@using DataLibrary
@using BoardGamesWebsiteWithAuthorization.Models
@using Microsoft.Extensions.Configuration
@using Microsoft.AspNetCore.Components.Authorization
@using System.Text
@using System.Text.RegularExpressions
@inject NavigationManager NavigationManager
@inject IDataAccess _data
@inject IConfiguration _config
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Friends</PageTitle>

<style>
    .user-container {
        display: flex;
        flex-wrap: wrap;
        justify-content: flex-start;
    }

    .user-box {
        width: 300px;
        border-radius: 15px;
        background: #ffffff;
        color: #333;
        padding: 20px;
        text-align: center;
        display: flex;
        flex-direction: column;
        align-items: center;
        margin: 10px;
        border: 1px solid #e0e0e0;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);
        transition: transform 0.3s ease;
    }

        .user-box:hover {
            transform: scale(1.05);
            box-shadow: 0 6px 15px rgba(0, 0, 0, 0.1);
        }

        .user-box img {
            width: 100px;
            height: 100px;
            border-radius: 50%;
            object-fit: cover;
            margin-bottom: 10px;
            border: 2px solid #e0e0e0;
        }

    .card-title {
        font-weight: bold;
        font-size: 18px;
        margin: 5px 0;
        color: #333;
    }

    .card-text {
        font-size: 14px;
        margin: 5px 0;
        color: #777;
    }

    .user-stats {
        display: flex;
        justify-content: space-around;
        width: 100%;
        margin-top: 10px;
    }

        .user-stats div {
            display: flex;
            flex-direction: column;
            align-items: center;
        }

            .user-stats div span:first-child {
                font-weight: bold;
                font-size: 16px;
                color: #333;
            }

    .button-container {
        display: flex;
        gap: 10px;
        margin-top: 0px;
    }

    .delete-btn {
        margin-top: 10px;
        padding: 3px 8px;
        border: none;
        color: white;
        cursor: pointer;
        border-radius: 5px;
        font-size: 16px;
        background-color: #d6c48e;
    }

    .games-btn {
        margin-top: 10px;
        background-color: #28a745;
        padding: 3px 8px;
        border: none;
        color: white;
        cursor: pointer;
        border-radius: 5px;
        font-size: 16px;
    }

    .modal-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 1040;
    }

    .search-container {
        display: flex;
        align-items: center;
        gap: 10px; /* Add space between the search input and button */
        margin-bottom: 20px;
    }

    .search-input {
        width: 100%;
        max-width: 600px;
        padding: 10px;
        font-size: 14px;
        border-radius: 5px;
        border: 1px solid #ccc;
    }

    .highlight {
        font-weight: bold;
        background-color: #FFE4C4;
        position: relative;
    }
</style>

<h3>Your Friends</h3>

<div class="search-container">
    <input type="text" placeholder="Search by username, name, or surname" @bind="searchTerm" @bind:event="oninput" class="search-input" />
    <NavLink href="/friends/invitations" class="btn btn-primary">Invitations</NavLink>
</div>

@if (friends == null)
{
    <p><em>Loading friends...</em></p>
}
else if (!friends.Any())
{
    <p>You don't have any friends yet.</p>
}
else
{
    <div class="user-container">
        @foreach (var friend in friends)
        {
            <div class="user-box">
                <img src="@(!string.IsNullOrEmpty(friend.UserPhoto) ? friend.UserPhoto : "path/to/default-image.jpg")" alt="User Photo" />
                <div class="card-title">@HighlightText(friend.WebUserName, searchTerm)</div>
                <div class="card-text">
                    <span>@HighlightText(friend.Name, searchTerm)</span>
                    <span>@HighlightText(friend.SecondName, searchTerm)</span>
                </div>
                <div class="card-text">Age: @(DateTime.Today.Year - (friend.DateOfBirth?.Year ?? 0))</div>
                <div class="card-text">Address: @friend.Adress</div>
                <div class="card-text">Preferred Localization: @friend.PrefferedLocalization</div>

                <div class="button-container">
                    <button class="delete-btn" @onclick="() => ShowDeleteModal(friend.Id)">
                        Delete
                    </button>
                    <button class="games-btn" @onclick="() => NavigateToGameCatalog(friend.Id)">
                        View Games
                    </button>
                </div>
            </div>
        }
    </div>
}

@if (showDeleteModal)
{
    <div class="modal show" tabindex="-1" style="display: block;" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="close" aria-label="Close" @onclick="CloseDeleteModal">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this friend?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseDeleteModal">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmDelete">Delete</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    List<UserModel> friends;
    string loggedInUserId;
    bool showDeleteModal = false;
    string friendIdToDelete;
    string searchTerm = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        loggedInUserId = await GetLoggedInUserId();
        await LoadFriends();
    }

    private async Task LoadFriends()
    {
        string sql = @"
            select * from aspnetusers
            where Id in (
                select IdUser1 from Friends where IdUser2 = @UserId
                union
                select IdUser2 from Friends where IdUser1 = @UserId
            )";

        friends = await _data.LoadData<UserModel, dynamic>(sql, new { UserId = loggedInUserId }, _config.GetConnectionString("default"));
    }

    private async Task<string> GetLoggedInUserId()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        string sql = "select Id from aspnetusers where UserName = @UserName";
        var result = await _data.LoadData<dynamic, dynamic>(sql, new { UserName = user.Identity?.Name }, _config.GetConnectionString("default"));

        return result?.FirstOrDefault()?.Id;
    }

    private void ShowDeleteModal(string friendId)
    {
        friendIdToDelete = friendId;
        showDeleteModal = true;
    }

    private void CloseDeleteModal()
    {
        showDeleteModal = false;
    }

    private async Task ConfirmDelete()
    {
        string sql = @"
            delete from Friends
            where (IdUser1 = @LoggedInUserId and IdUser2 = @FriendId)
               or (IdUser1 = @FriendId and IdUser2 = @LoggedInUserId)";

        await _data.SaveData(sql, new { LoggedInUserId = loggedInUserId, FriendId = friendIdToDelete }, _config.GetConnectionString("default"));
        await LoadFriends();
        showDeleteModal = false;
    }

    private void NavigateToGameCatalog(string friendId)
    {
        NavigationManager.NavigateTo($"/friends/{friendId}/games");
    }

    private MarkupString HighlightText(string text, string searchQuery)
    {
        if (string.IsNullOrEmpty(searchQuery) || string.IsNullOrEmpty(text))
        {
            return (MarkupString)text;
        }

        // Escape any special characters in the search query to use in regex
        var regexSearch = Regex.Escape(searchQuery);

        // Use a case-insensitive regex to find all occurrences of the search term
        var regex = new Regex(regexSearch, RegexOptions.IgnoreCase);

        // Replace all occurrences of the search term with a highlighted span
        var highlightedText = regex.Replace(text, match =>
        {
            return $"<span class='highlight'>{match.Value}</span>";
        });

        return (MarkupString)highlightedText;
    }
}
