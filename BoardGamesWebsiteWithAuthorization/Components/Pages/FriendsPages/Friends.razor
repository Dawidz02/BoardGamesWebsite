@page "/friends"
@rendermode InteractiveServer

@using DataLibrary
@using BoardGamesWebsiteWithAuthorization.Models
@using Microsoft.Extensions.Configuration
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager NavigationManager
@inject IDataAccess _data
@inject IConfiguration _config
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Friends</PageTitle>

<style>
    .user-container {
        display: flex;
        flex-wrap: wrap;
        justify-content: flex-start;
    }

    .user-box {
        border: 1px solid #ccc;
        padding: 10px;
        margin: 10px;
        border-radius: 5px;
        width: 500px;
        height: 400px;
        box-sizing: border-box;
        display: flex;
        background-color: #f9f9f9;
        flex-direction: column;
        transition: transform 0.3s ease; /* Smooth transition effect */
    }

        .user-box:hover {
            transform: scale(1.02); /* Enlarge the container slightly */
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2); /* Add a shadow effect for emphasis */
        }   

        .user-box img {
            width: 100px;
            height: 100px;
            border-radius: 50%;
            object-fit: cover;
            margin-bottom: 10px;
        }

    .button-container {
        display: flex;
        gap: 10px; /* Space between buttons */
        margin-top: auto; /* Align buttons to the bottom */
    }

    .delete-btn {
        padding: 3px 8px;
        background-color: #dc3545;
        border: none;
        color: white;
        cursor: pointer;
        border-radius: 5px;
        font-size: 12px;
    }

    .games-btn {
        padding: 3px 8px;
        background-color: #28a745;
        border: none;
        color: white;
        cursor: pointer;
        border-radius: 5px;
        font-size: 12px;
    }

    .modal-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 1040;
    }
</style>

<h3>Your Friends</h3>

<div class="button-container">
    <NavLink href="/friends/invitations" class="btn btn-primary mb-3" style="margin-left: 5px;">Invitations</NavLink>
</div>

@if (friends == null)
{
    <p><em>Loading friends...</em></p>
}
else if (!friends.Any())
{
    <p>You don't have any friends yet.</p>
}
else
{
    <div class="user-container">
        @foreach (var friend in friends)
        {
            <div class="user-box">
                @if (!string.IsNullOrEmpty(friend.UserPhoto))
                {
                    <img src="@friend.UserPhoto" alt="Friend Photo" />
                }
                else
                {
                    <img src="path/to/default-image.jpg" alt="Default Friend Photo" />
                }
                <h4>@friend.WebUserName</h4>
                <p><strong>Name:</strong> @friend.Name</p>
                <p><strong>Second Name:</strong> @friend.SecondName</p>
                <p><strong>Address:</strong> @friend.Adress</p>
                <p><strong>Preferred Localization:</strong> @friend.PrefferedLocalization</p>
                <p><strong>Age:</strong> @(DateTime.Today.Year - (friend.DateOfBirth?.Year ?? 0))</p>

                <!-- Button Container for Delete and View Games Buttons -->
                <div class="button-container">
                    <button class="delete-btn" @onclick="() => ShowDeleteModal(friend.Id)">
                        Delete
                    </button>
                    <button class="games-btn" @onclick="() => NavigateToGameCatalog(friend.Id)">
                        View Games
                    </button>
                </div>
            </div>
        }
    </div>
}

<!-- Delete Confirmation Modal -->
@if (showDeleteModal)
{
    <div class="modal show" tabindex="-1" style="display: block;" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="close" aria-label="Close" @onclick="CloseDeleteModal">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this friend?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseDeleteModal">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmDelete">Delete</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div> <!-- Overlay for modal -->
}

@code {
    List<UserModel> friends; // List of friends
    string loggedInUserId;
    bool showDeleteModal = false; // Control delete modal visibility
    string friendIdToDelete; // Store friend ID to delete

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // Get the logged-in user's ID
        loggedInUserId = await GetLoggedInUserId();

        // Load friends from the Friends table
        await LoadFriends();
    }

    private async Task LoadFriends()
    {
        // Load friends where the logged-in user is IdUser1 or IdUser2
        string sql = @"
            select * from aspnetusers
            where Id in (
                select IdUser1 from Friends where IdUser2 = @UserId
                union
                select IdUser2 from Friends where IdUser1 = @UserId
            )";

        friends = await _data.LoadData<UserModel, dynamic>(sql, new { UserId = loggedInUserId }, _config.GetConnectionString("default"));
    }

    private async Task<string> GetLoggedInUserId()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        string sql = "select Id from aspnetusers where UserName = @UserName";
        var result = await _data.LoadData<dynamic, dynamic>(sql, new { UserName = user.Identity?.Name }, _config.GetConnectionString("default"));

        return result?.FirstOrDefault()?.Id;
    }

    private void ShowDeleteModal(string friendId)
    {
        friendIdToDelete = friendId;
        showDeleteModal = true;
    }

    private void CloseDeleteModal()
    {
        showDeleteModal = false;
    }

    private async Task ConfirmDelete()
    {
        // Delete the friend relationship from the Friends table
        string sql = @"
            delete from Friends
            where (IdUser1 = @LoggedInUserId and IdUser2 = @FriendId)
               or (IdUser1 = @FriendId and IdUser2 = @LoggedInUserId)";

        await _data.SaveData(sql, new { LoggedInUserId = loggedInUserId, FriendId = friendIdToDelete }, _config.GetConnectionString("default"));

        // Refresh the friends list after deletion
        await LoadFriends();
        showDeleteModal = false;
    }

    private void NavigateToGameCatalog(string friendId)
    {
        // Navigate to the friend's game catalog page, passing the friend's ID in the URL
        NavigationManager.NavigateTo($"/friends/{friendId}/games");
    }
}
