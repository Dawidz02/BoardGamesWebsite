@page "/friends/{userId}/rooms"
@rendermode InteractiveServer

@using DataLibrary
@using BoardGamesWebsiteWithAuthorization.Models
@inject IDataAccess _data
@inject IConfiguration _config
@inject NavigationManager NavigationManager

<style>
    .room-cards-container {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(310px, 1fr));
        gap: 1.5rem;
    }

    .room-card {
        position: relative;
        display: flex;
        align-items: center;
        padding: 1.5rem;
        border-radius: 10px;
        background-color: #ffffff;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        min-height: 200px;
    }

        .room-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 6px 14px rgba(0, 0, 0, 0.2);
        }

    .profile-section {
        display: flex;
        align-items: center;
        margin-top: 1rem;
    }

    .vertical-skill-level-bar {
        display: flex;
        flex-direction: column;
        gap: 2px;
        margin-right: 10px;
        margin-left: -10px;
    }

    .skill-segment {
        width: 25px;
        height: 25px;
        background-color: #e0e0e0;
        border-radius: 2px;
        position: relative;
        transition: background-color 0.3s ease;
    }

        .skill-segment.low {
            background-color: red;
            color: white;
        }

        .skill-segment.medium {
            background-color: orange;
            color: white;
        }

        .skill-segment.high {
            background-color: green;
            color: white;
        }

    .skill-number {
        font-size: 10px;
        color: white;
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        pointer-events: none;
    }

    .profile-image-wrapper {
        position: relative;
        width: 140px;
        height: auto;
        border-radius: 10px;
        overflow: hidden;
        margin-right: 10px;
        text-align: center;
    }

    .profile-image {
        width: 100%;
        height: 140px;
        object-fit: contain;
        border-radius: 10px;
    }

    .game-name {
        margin-top: 0.5rem;
        font-size: 1rem;
        text-align: center;
        font-weight: bold;
    }

    .details-section {
        display: flex;
        flex-direction: column;
        flex-grow: 1;
        margin-top: -2.0rem;
        padding: 0;
    }

    .room-title {
        font-size: 1.5rem;
        font-weight: bold;
        margin: 0;
        text-align: center;
        position: absolute;
        top: 15px;
        left: 50%;
        transform: translateX(-50%);
        width: 100%;
    }

    .location,
    .availability,
    .host,
    .join-type {
        font-size: 0.9rem;
        margin: 0.25rem 0;
    }

    .action-buttons {
        display: flex;
        gap: 0.5rem;
        position: absolute;
        bottom: 5px;
        left: 0;
        right: 0;
        justify-content: center;
    }

    .btn {
        padding: 0.5rem 1rem;
        border-radius: 5px;
        cursor: pointer;
        font-size: 0.9rem;
        font-weight: bold;
        transition: background-color 0.2s ease;
        outline: none !important;
    }

        .btn:focus, .btn:active {
            outline: none !important;
            box-shadow: none !important;
        }

    .btn-primary {
        background-color: #007bff;
        color: white;
        border: none;
    }

        .btn-primary:hover {
            background-color: #0056b3;
        }
</style>

<h3>User's Rooms</h3>

<button class="btn btn-secondary mb-3" @onclick="NavigateToFriendsPage">Back to Friends</button>

@if (rooms == null)
{
    <p><em>Loading rooms...</em></p>
}
else if (!rooms.Any())
{
    <p>This user has no rooms to display.</p>
}
else
{
    <div class="room-cards-container">
        @foreach (var room in rooms)
        {
            <div class="room-card">
                <div class="profile-section">
                    <div class="vertical-skill-level-bar">
                        @for (int i = 10; i >= 1; i--)
                        {
                            string levelClass = room.SkillLevelRequired switch
                            {
                                <= 3 => "low",
                                <= 7 => "medium",
                                _ => "high"
                            };

                            string activeClass = i <= room.SkillLevelRequired ? levelClass : "";

                            <div class="skill-segment @(activeClass)">
                                <span class="skill-number">@i</span>
                            </div>
                        }
                    </div>
                    <div class="profile-image-wrapper">
                        <img class="profile-image" src="@room.MainGameImageUrl" alt="Main Game Image" />
                        <p class="game-name">@room.GameName</p>
                    </div>
                </div>
                <div class="details-section">
                    <h2 class="room-title">@room.RoomName</h2>
                    <p class="location">@room.Localization</p>
                    <p class="availability">
                        <strong>Availability:</strong> @(room.Availability ? "Available" : "Not Available")
                    </p>
                    <p class="host"><strong>Host:</strong> @room.HostName</p>
                    <p class="join-type"><strong>Who Can Join:</strong> @(room.WhoCanJoin ? "Anyone" : "Invite Only")</p>
                </div>
                <div class="action-buttons">
                    <button class="btn btn-primary" @onclick="() => NavigateToRoomDetails(room.Id)">More</button>
                </div>
            </div>
        }
    </div>
    <div style="height: 30px;"></div>
}

@code {
    [Parameter] public string userId { get; set; }
    private List<RoomModel> rooms = new List<RoomModel>();

    protected override async Task OnInitializedAsync()
    {
        await LoadRooms();
    }

    private async Task LoadRooms()
    {
        string sql = @"
        SELECT
            r.Id AS Id,
            r.RoomName,
            g.GameName,
            u.WebUserName AS HostName,
            r.Localization,
            r.Availability,
            r.WhoCanJoin,
            r.SkillLevelRequired,
            gi.ImageUrl AS MainGameImageUrl
        FROM Rooms r
        LEFT JOIN Games g ON r.IdGame = g.Id
        LEFT JOIN AspNetUsers u ON r.IdHost = u.Id
        LEFT JOIN Game_Image gi ON g.Id = gi.IdGame AND gi.IsMain = 1
        WHERE r.IdHost = @UserId OR r.Id IN (
            SELECT rp.IdRoom
            FROM Room_Participants rp
            WHERE rp.IdUser = @UserId
        )
        ORDER BY r.CreatingDate DESC;
        ";

        rooms = await _data.LoadData<RoomModel, dynamic>(sql, new { UserId = userId }, _config.GetConnectionString("default"));
    }

    private void NavigateToFriendsPage()
    {
        NavigationManager.NavigateTo("/friends");
    }

    private void NavigateToRoomDetails(int roomId)
    {
        NavigationManager.NavigateTo($"/roomdetails/{roomId}?userId={userId}");
    }
}
