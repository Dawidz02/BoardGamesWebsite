@page "/friends/{friendId}/games"
@rendermode InteractiveServer

@using DataLibrary
@using BoardGamesWebsiteWithAuthorization.Models
@using Microsoft.Extensions.Configuration
@using Microsoft.AspNetCore.Components.Authorization
@inject IDataAccess _data
@inject IConfiguration _config
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<PageTitle>Friend's Games</PageTitle>

<h3>Friend's Game Catalog</h3>

<!-- Back to Friends button -->
<button class="btn btn-secondary mb-3" @onclick="GoBackToFriends">Back to Friends</button>

<style>
    .game-container {
        display: flex;
        flex-wrap: wrap;
        gap: 15px;
        margin-bottom: 20px;
    }

    .game-card {
        position: relative;
        width: 300px; /* Adjust this as necessary */
        border: 1px solid #ddd; /* Border styling */
        border-radius: 5px; /* Rounded corners */
        padding: 10px; /* Padding for the card */
        background-color: #f9f9f9; /* Default background color */
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* Box shadow for depth */
        transition: transform 0.2s, background-color 0.2s; /* Smooth transform on hover and background-color */
    }

        .game-card.ready {
            background-color: #F0FFF0; /* Light green background for "Ready to Play" */
            border-color: #c3e6cb; /* Slightly darker green border */
        }

        .game-card.notReady {
            background-color: #FFEEEE; /* Light red background for "Not Ready" */
            border-color: #c3e6cb; /* Slightly darker red border */
        }

        .game-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
        }

        .game-card img {
            width: 100%; /* Fit image to container width */
            max-height: 200px; /* Set a maximum height */
            object-fit: contain; /* Fit image without cropping */
            border-radius: 5px;
            margin-bottom: 10px;
            background-color: white; /* Ensure the background behind images is white */
        }

    .card-title {
        font-size: 18px;
        font-weight: bold;
        margin-bottom: 5px;
        text-align: center;
    }

    .card-text {
        margin-bottom: 10px;
        max-height: 100px; /* Set a maximum height */
        overflow: hidden; /* Hide overflow content */
        text-overflow: ellipsis; /* Optional: show ellipsis for overflow text */
        display: -webkit-box; /* For multiline truncation */
        -webkit-line-clamp: 4; /* Limit to 4 lines */
        -webkit-box-orient: vertical; /* Define box orientation */
    }

    .skill-level-bar {
        display: flex;
        gap: 1px;
        margin-top: 1px;
        margin-bottom: 10px;
    }

    .skill-level-horizontal-bar {
        display: flex;
        gap: 4px;
        margin: 10px 0;
        justify-content: center;
        align-items: center;
    }

    .skill-level-segment {
        width: 30px;
        height: 30px;
        text-align: center;
        line-height: 30px;
        border: 1px solid #ddd;
        border-radius: 4px;
        background-color: #f9f9f9;
        cursor: pointer;
        transition: background-color 0.3s, color 0.3s;
    }

        /* Kolory w zależności od poziomu */
        .skill-level-segment.low {
            background-color: red;
            color: white;
        }

        .skill-level-segment.medium {
            background-color: orange;
            color: white;
        }

        .skill-level-segment.high {
            background-color: green;
            color: white;
        }

        /* Aktywne segmenty */
        .skill-level-segment.selected {
            font-weight: bold;
            border: 2px solid black; /* Wyróżnienie dla aktywnego */
        }
</style>
@if (games == null)
{
    <p><em>Loading games...</em></p>
}
else if (!games.Any())
{
    <p>This friend has no games in their catalog.</p>
}
else
{
    <div class="game-container">
        @foreach (var game in games.Where(g => !g.IsDLC))
        {
            var mainImage = game.GameImages?.FirstOrDefault(img => img.IsMain);

            <div class="game-card @(game.ReadyToPlay ? "ready" : "notReady")">
                @if (mainImage != null && !string.IsNullOrEmpty(mainImage.ImageUrl))
                {
                    <img src="@mainImage.ImageUrl" alt="Main Image" class="img-thumbnail" />
                }
                else
                {
                    <img src="/path/to/default-image.jpg" alt="No Image" class="img-thumbnail" />
                }

                <div class="card-content">
                    <div class="card-title">@game.GameName</div>

                    <div>
                        <strong>Publisher:</strong> @game.Publisher<br />
                        <strong>Author:</strong> @game.Author<br />
                    </div>
                    <!-- Skill Level display as segments -->
                    <label for="skillLevel">Skill Level</label>
                    <div class="skill-level-horizontal-bar">
                        @for (int i = 1; i <= 10; i++)
                        {
                            string levelClass = game.SkillLevel switch
                            {
                                <= 3 => "low",
                                <= 7 => "medium",
                                _ => "high"
                            };

                            // Jeśli poziom `i` jest aktywny, dodaj `selected` do klasy
                            string activeClass = i <= game.SkillLevel ? $"{levelClass} selected" : "";

                            <div class="skill-level-segment @(activeClass)">
                                @i
                            </div>
                        }
                    </div>
                    <p class="card-text">@game.GameDescription</p>
                </div>
            </div>
        }
</div>

        <!-- Nagłówek DLC -->
        <h3 style="margin-top: 40px;">DLC:</h3>

        <div class="game-container">
            @foreach (var game in games.Where(g => g.IsDLC))
            {
                var mainImage = game.GameImages?.FirstOrDefault(img => img.IsMain);

                <div class="game-card @(game.ReadyToPlay ? "ready" : "notReady")">
                    @if (mainImage != null && !string.IsNullOrEmpty(mainImage.ImageUrl))
                    {
                        <img src="@mainImage.ImageUrl" alt="Main Image" class="img-thumbnail" />
                    }
                    else
                    {
                        <img src="/path/to/default-image.jpg" alt="No Image" class="img-thumbnail" />
                    }

                    <div class="card-content">
                        <div class="card-title">@game.GameName</div>
                        <p class="card-text">@game.GameDescription</p>

                        <!-- Skill Level display -->
                    <div class="skill-level-horizontal-bar">
                        @for (int i = 1; i <= 10; i++)
                        {
                            string levelClass = game.SkillLevel switch
                            {
                                <= 3 => "low",
                                <= 7 => "medium",
                                _ => "high"
                            };

                            // Jeśli poziom `i` jest aktywny, dodaj `selected` do klasy
                            string activeClass = i <= game.SkillLevel ? $"{levelClass} selected" : "";

                            <div class="skill-level-segment @(activeClass)">
                                @i
                            </div>
                        }
                    </div>

                        <!-- Ready to Play status -->
                        <div>
                            <strong>Ready to Play:</strong> @(game.ReadyToPlay ? "Yes" : "No")
                        </div>

                        <div>
                            <strong>Publisher:</strong> @game.Publisher<br />
                            <strong>Author:</strong> @game.Author<br />
                        </div>
                    </div>
                </div>
            }
        </div>
    }

@code {
    [Parameter] public string FriendId { get; set; }
    List<GameModel> games;

    protected override async Task OnInitializedAsync()
    {
        await LoadFriendGames();
        foreach (var game in games)
        {
            string imageSql = "SELECT * FROM Game_Image WHERE IdGame = @IdGame";
            var imageResults = await _data.LoadData<GameImageModel, dynamic>(imageSql, new { IdGame = game.Id }, _config.GetConnectionString("default"));
            game.GameImages = imageResults.ToList();
        }
    }

    private async Task LoadFriendGames()
    {
        // SQL query to load the friend's games based on their user ID, including DLC information
        string gamesSql = @"
            SELECT
                g.*,
                ug.SkillLevel,
                ug.ReadyToPlay,
                CASE WHEN EXISTS (SELECT 1 FROM DLC WHERE DLCGameId = g.Id) THEN 1 ELSE 0 END AS IsDLC
            FROM User_Game ug
            JOIN games g ON ug.IdGame = g.Id
            WHERE ug.IdUser = @FriendId";

        games = await _data.LoadData<GameModel, dynamic>(gamesSql, new { FriendId }, _config.GetConnectionString("default"));
    }

    private void GoBackToFriends()
    {
        NavigationManager.NavigateTo("/friends"); // Adjust the route as necessary
    }
}
