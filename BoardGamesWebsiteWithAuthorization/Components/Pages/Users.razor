@page "/users"
@rendermode InteractiveServer

@using DataLibrary
@using BoardGamesWebsiteWithAuthorization.Models
@using Microsoft.Extensions.Configuration
@using Microsoft.AspNetCore.Components.Authorization
@inject IDataAccess _data
@inject IConfiguration _config
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Users</PageTitle>

<style>
    .user-container {
        display: flex;
        flex-wrap: wrap;
        justify-content: flex-start;
    }

    .user-box {
        border: 1px solid #ccc;
        padding: 10px;
        margin: 10px;
        border-radius: 5px;
        width: 500px;
        height: 400px;
        box-sizing: border-box;
        display: flex;
        background-color: #f9f9f9;
        flex-direction: column;
        transition: transform 0.3s ease; /* Smooth transition effect */
    }

        .user-box:hover {
            transform: scale(1.05); /* Enlarge the container slightly */
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2); /* Add a shadow effect for emphasis */
        }


        .user-box img {
            width: 100px;
            height: 100px;
            border-radius: 50%;
            object-fit: cover;
            margin-bottom: 10px;
        }

    .button-container {
        display: flex;
        gap: 10px; /* Space between buttons */
        margin-top: auto; /* Align buttons to the bottom */
    }

    .invite-btn, .delete-btn {
        padding: 3px 8px; /* Smaller buttons */
        background-color: #007bff;
        border: none;
        color: white;
        cursor: pointer;
        border-radius: 5px;
        font-size: 12px; /* Reduced font size */
    }

    .delete-btn {
        background-color: #dc3545;
    }

    .invite-btn[disabled] {
        background-color: #ccc;
        cursor: not-allowed;
    }
</style>

<h3>Users</h3>

@if (users == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="user-container">
        @foreach (var u in users)
        {
            @if (u.UserName != loggedInUserName)
            {
                <div class="user-box">
                    @if (!string.IsNullOrEmpty(u.UserPhoto))
                    {
                        <img src="@u.UserPhoto" alt="User Photo" />
                    }
                    else
                    {
                        <img src="path/to/default-image.jpg" alt="Default User Photo" />
                    }
                    <h4>@u.WebUserName</h4>
                    <p><strong>Name:</strong> @u.Name</p>
                    <p><strong>Second Name:</strong> @u.SecondName</p>
                    <p><strong>Address:</strong> @u.Adress</p>
                    <p><strong>Preferred Localization:</strong> @u.PrefferedLocalization</p>
                    <p><strong>Age:</strong> @(DateTime.Today.Year - (u.DateOfBirth?.Year ?? 0))</p>

                    <!-- Display status or invite/delete buttons -->
                    <div class="button-container">
                        @if (friends.Contains(u.Id))
                        {
                            <span>Friend</span>
                        }
                        else if (pendingInvitations.Contains(u.Id))
                        {
                            <span>Invitation is waiting</span>
                        }
                        else if (invitationSent.Contains(u.Id))
                        {
                            <button class="invite-btn" disabled>Invitation was sent</button>
                            <button class="delete-btn" @onclick="() => DeleteInvitation(u.Id)">Delete Invitation</button>
                        }
                        else
                        {
                            <button class="invite-btn" @onclick="() => SendInvitation(u.Id)">Send Invitation</button>
                        }
                    </div>
                </div>
            }
        }
    </div>
}

@code {
    List<UserModel> users;
    List<string> invitationSent = new List<string>(); // List of users you have sent invitations to
    List<string> pendingInvitations = new List<string>(); // List of users who sent you invitations
    List<string> friends = new List<string>(); // List of users who are already friends
    string loggedInUserName;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // Get the logged-in user's name
        loggedInUserName = user.Identity?.Name;

        // Load all users
        string sql = "select * from aspnetusers";
        users = await _data.LoadData<UserModel, dynamic>(sql, new { }, _config.GetConnectionString("default"));

        // Load information about friends, invitations sent, and invitations received
        await LoadFriends();
        await LoadInvitationsSent();
        await LoadPendingInvitations();
    }

    // Load the friends of the logged-in user
    private async Task LoadFriends()
    {
        var loggedInUserId = await GetLoggedInUserId();

        // SQL to fetch friends of the logged-in user
        string sql = @"
            select Id from aspnetusers
            where Id in (
                select IdUser1 from Friends where IdUser2 = @UserId
                union
                select IdUser2 from Friends where IdUser1 = @UserId
            )";

        var result = await _data.LoadData<dynamic, dynamic>(sql, new { UserId = loggedInUserId }, _config.GetConnectionString("default"));
        friends = result.Select(r => (string)r.Id).ToList();
    }

    // Load the invitations sent by the logged-in user
    private async Task LoadInvitationsSent()
    {
        var invitedBy = await GetLoggedInUserId();

        // SQL to fetch the invitations sent by the logged-in user
        string sql = "select IdUser from Friend_Invitations where InvitedBy = @InvitedBy";
        var result = await _data.LoadData<dynamic, dynamic>(sql, new { InvitedBy = invitedBy }, _config.GetConnectionString("default"));

        invitationSent = result.Select(r => (string)r.IdUser).ToList();
    }

    // Load the invitations received by the logged-in user (pending invitations)
    private async Task LoadPendingInvitations()
    {
        var loggedInUserId = await GetLoggedInUserId();

        // SQL to fetch the invitations received by the logged-in user
        string sql = "select InvitedBy from Friend_Invitations where IdUser = @LoggedInUserId";
        var result = await _data.LoadData<dynamic, dynamic>(sql, new { LoggedInUserId = loggedInUserId }, _config.GetConnectionString("default"));

        pendingInvitations = result.Select(r => (string)r.InvitedBy).ToList();
    }

    // Send an invitation to another user
    private async Task SendInvitation(string userId)
    {
        var invitedBy = await GetLoggedInUserId();

        // Check if the invitation has not been sent already
        if (!invitationSent.Contains(userId))
        {
            // SQL to insert a new invitation
            string sql = @"
                INSERT INTO Friend_Invitations (IdUser, InvitedBy, SendingDate)
                VALUES (@IdUser, @InvitedBy, @SendingDate);";

            await _data.SaveData(sql, new
            {
                IdUser = userId,
                InvitedBy = invitedBy,
                SendingDate = DateTime.Now
            }, _config.GetConnectionString("default"));

            // Add the user to the list of users to whom invitations were sent
            invitationSent.Add(userId);
        }
    }

    // Delete an invitation that has been sent
    private async Task DeleteInvitation(string userId)
    {
        var invitedBy = await GetLoggedInUserId();

        // SQL to delete the invitation
        string sql = "DELETE FROM Friend_Invitations WHERE IdUser = @IdUser AND InvitedBy = @InvitedBy";

        await _data.SaveData(sql, new
        {
            IdUser = userId,
            InvitedBy = invitedBy
        }, _config.GetConnectionString("default"));

        // Remove the user from the list of users to whom invitations were sent
        invitationSent.Remove(userId);
    }

    // Get the logged-in user's Id
    private async Task<string> GetLoggedInUserId()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        string sql = "select Id from aspnetusers where UserName = @UserName";

        var result = await _data.LoadData<dynamic, dynamic>(sql, new { UserName = user.Identity?.Name }, _config.GetConnectionString("default"));
        return result?.FirstOrDefault()?.Id;
    }
}
