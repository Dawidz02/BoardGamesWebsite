@page "/users"
@rendermode InteractiveServer

@using DataLibrary
@using BoardGamesWebsiteWithAuthorization.Models
@using Microsoft.Extensions.Configuration
@using Microsoft.AspNetCore.Components.Authorization
@using System.Text
@inject IDataAccess _data
@inject IConfiguration _config
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Users</PageTitle>

<style>
    .user-container {
        display: flex;
        flex-wrap: wrap;
        justify-content: flex-start;
    }

    .user-box {
        width: 300px;
        border-radius: 15px;
        background: #ffffff; /* Pure white background */
        color: #333; /* Darker text color for better contrast */
        padding: 20px;
        text-align: center;
        display: flex;
        flex-direction: column;
        align-items: center;
        margin: 10px;
        border: 1px solid #e0e0e0; /* Light gray border to define the edges */
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05); /* Very light shadow for a soft effect */
        transition: transform 0.3s ease;
    }

        .user-box:hover {
            transform: translateY(-5px);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
        }

        .user-box img {
            width: 100px;
            height: 100px;
            border-radius: 50%;
            object-fit: cover;
            margin-bottom: 10px;
            border: 2px solid #e0e0e0; /* Light gray border around the image */
        }

    .card-title {
        font-weight: bold;
        font-size: 18px;
        margin: 5px 0;
        color: #333; /* Dark text for title */
    }

    .card-text {
        font-size: 14px;
        margin: 5px 0;
        color: #777; /* Light gray text for better contrast */
    }

    .user-stats {
        display: flex;
        justify-content: space-around;
        width: 100%;
        margin-top: 10px;
    }

        .user-stats div {
            display: flex;
            flex-direction: column;
            align-items: center;
        }

            .user-stats div span:first-child {
                font-weight: bold;
                font-size: 16px;
                color: #333; /* Dark text for stats */
            }

    .button-container {
        display: flex;
        gap: 10px;
        margin-top: 15px;
    }

    .invite-btn, .delete-btn {
        padding: 8px 16px;
        font-size: 14px;
        border-radius: 5px;
        cursor: pointer;
        border: none;
        color: white;
    }

    .invite-btn {
        background-color: #d6c48e; /* Soft beige for the invite button */
    }

    .delete-btn {
        background-color: #dc3545; /* Red button for delete action */
    }

    .invite-btn:disabled {
        background-color: #d6c48e; /* Very light beige for disabled button */
        cursor: not-allowed;
    }

    .highlight {
        font-weight: bold; /* Pogrubienie tekstu */
        background-color: #FFE4C4; /* Kolor tła */
        position: relative; /* Ustalona pozycja */
    }

    .search-input {
        width: 100%; /* Makes the search bar take up 100% of the available width */
        max-width: 600px; /* Optional: Sets a maximum width to avoid it becoming too wide */
        padding: 10px;
        font-size: 14px;
        border-radius: 5px;
        border: 1px solid #ccc;
        margin-bottom: 20px; /* Add space below the search bar */
    }

</style>

<h3>Users</h3>

<input type="text" placeholder="Search by username, name, or surname" @bind="searchTerm" @bind:event="oninput" class="search-input" />

@if (filteredUsers == null || !filteredUsers.Any())
{
    <p><em>No users found...</em></p>
}
else
{
    <div class="user-container">
        @foreach (var u in FilteredUsers)
        {
            @if (u.UserName != loggedInUserName)
            {
                var isFriend = friends.Contains(u.Id);
                var isPendingInvitation = pendingInvitations.Contains(u.Id);
                var isInvitationSent = invitationSent.Contains(u.Id);

                <div class="user-box">
                    <img src="@(!string.IsNullOrEmpty(u.UserPhoto) ? u.UserPhoto : "path/to/default-image.jpg")" alt="User Photo" />

                    <div class="card-title">@HighlightText(u.WebUserName, searchTerm)</div>
                    <div class="card-text">
                        <span>@HighlightText(u.Name, searchTerm)</span>
                        <span>@HighlightText(u.SecondName, searchTerm)</span>
                    </div>
                    <div class="card-text">Age: @(DateTime.Today.Year - (u.DateOfBirth?.Year ?? 0))</div>
                    <div class="card-text">Address: @u.Adress</div>
                    <div class="card-text">Preferred Localization: @u.PrefferedLocalization</div>

                    <div class="button-container">
                        @if (isFriend)
                        {
                            <span>Friend</span>
                        }
                        else if (isPendingInvitation)
                        {
                            <span>Invitation is waiting</span>
                        }
                        else if (isInvitationSent)
                        {
                            <!-- "X" button on the left -->
                            <button class="delete-btn" @onclick="() => DeleteInvitation(u.Id)">
                                <span style="font-size: 12px; font-weight: bold;">X</span>
                            </button>
                            <button class="invite-btn" disabled>Invitation was sent</button>
                        }
                        else
                        {
                            <button class="invite-btn" @onclick="() => SendInvitation(u.Id)">Send Invitation</button>
                        }
                    </div>


                </div>
            }
        }
    </div>
}

@code {
    List<UserModel> users;
    List<UserModel> filteredUsers;
    List<string> invitationSent = new List<string>();
    List<string> pendingInvitations = new List<string>();
    List<string> friends = new List<string>();
    string loggedInUserName;
    string searchTerm = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        loggedInUserName = user.Identity?.Name;

        string sql = "select * from aspnetusers";
        users = await _data.LoadData<UserModel, dynamic>(sql, new { }, _config.GetConnectionString("default"));

        await LoadFriends();
        await LoadInvitationsSent();
        await LoadPendingInvitations();

        filteredUsers = new List<UserModel>(users);
    }

    private IEnumerable<UserModel> FilteredUsers
    {
        get
        {
            var filteredUsers = users
                .Where(u => u.WebUserName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                            u.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                            u.SecondName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

            if (!string.IsNullOrEmpty(searchTerm))
            {
                filteredUsers = filteredUsers.Where(u =>
                    u.WebUserName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    u.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    u.SecondName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
            }
            return filteredUsers.ToList();
        }
    }

    private async Task LoadFriends()
    {
        var loggedInUserId = await GetLoggedInUserId();
        string sql = @"
            select Id from aspnetusers
            where Id in (
                select IdUser1 from Friends where IdUser2 = @UserId
                union
                select IdUser2 from Friends where IdUser1 = @UserId
            )";
        var result = await _data.LoadData<dynamic, dynamic>(sql, new { UserId = loggedInUserId }, _config.GetConnectionString("default"));
        friends = result.Select(r => (string)r.Id).ToList();
    }

    private async Task LoadInvitationsSent()
    {
        var invitedBy = await GetLoggedInUserId();
        string sql = "select IdUser from Friend_Invitations where InvitedBy = @InvitedBy";
        var result = await _data.LoadData<dynamic, dynamic>(sql, new { InvitedBy = invitedBy }, _config.GetConnectionString("default"));
        invitationSent = result.Select(r => (string)r.IdUser).ToList();
    }

    private async Task LoadPendingInvitations()
    {
        var loggedInUserId = await GetLoggedInUserId();
        string sql = "select InvitedBy from Friend_Invitations where IdUser = @LoggedInUserId";
        var result = await _data.LoadData<dynamic, dynamic>(sql, new { LoggedInUserId = loggedInUserId }, _config.GetConnectionString("default"));
        pendingInvitations = result.Select(r => (string)r.InvitedBy).ToList();
    }

    private async Task SendInvitation(string userId)
    {
        var invitedBy = await GetLoggedInUserId();
        if (!invitationSent.Contains(userId))
        {
            string sql = @"
                INSERT INTO Friend_Invitations (IdUser, InvitedBy, SendingDate)
                VALUES (@IdUser, @InvitedBy, @SendingDate);";
            await _data.SaveData(sql, new
            {
                IdUser = userId,
                InvitedBy = invitedBy,
                SendingDate = DateTime.Now
            }, _config.GetConnectionString("default"));
            invitationSent.Add(userId);
        }
    }

    private async Task DeleteInvitation(string userId)
    {
        var invitedBy = await GetLoggedInUserId();
        string sql = "DELETE FROM Friend_Invitations WHERE IdUser = @IdUser AND InvitedBy = @InvitedBy";
        await _data.SaveData(sql, new { IdUser = userId, InvitedBy = invitedBy }, _config.GetConnectionString("default"));
        invitationSent.Remove(userId);
    }

    private async Task<string> GetLoggedInUserId()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        string sql = "select Id from aspnetusers where UserName = @UserName";
        var result = await _data.LoadData<dynamic, dynamic>(sql, new { UserName = user.Identity.Name }, _config.GetConnectionString("default"));
        return result.FirstOrDefault()?.Id;
    }

    // Funkcja podświetlania tekstu w wynikach wyszukiwania
    private MarkupString HighlightText(string text, string searchQuery)
    {
        if (string.IsNullOrEmpty(searchQuery) || string.IsNullOrEmpty(text))
        {
            return (MarkupString)text;
        }

        var highlightedText = new StringBuilder();
        int queryIndex = 0;
        for (int i = 0; i < text.Length; i++)
        {
            if (queryIndex < searchQuery.Length &&
                char.ToLower(text[i]) == char.ToLower(searchQuery[queryIndex]))
            {
                // Jeśli litera pasuje do wyszukiwanego hasła, pogrub ją i podświetl
                highlightedText.Append($"<span class='highlight'>{text[i]}</span>");
                queryIndex++; // Przejdź do kolejnej litery wyszukiwanego hasła
            }
            else
            {
                highlightedText.Append(text[i]);
            }
        }

        return (MarkupString)highlightedText.ToString();
    }
}
