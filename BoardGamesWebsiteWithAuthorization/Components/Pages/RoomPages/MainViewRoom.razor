@page "/rooms"
@rendermode InteractiveServer

@using BoardGamesWebsiteWithAuthorization.Models
@using DataLibrary
@using System.Security.Claims
@inject IDataAccess _data
@inject IConfiguration _config
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider

<style>
    /* Stylizacja - niezmieniona */
    .room-cards-container {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(310px, 1fr));
        gap: 1.5rem;
    }

    .room-card {
        position: relative;
        display: flex;
        align-items: center;
        padding: 1.5rem;
        border-radius: 10px;
        background-color: #ffffff;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        min-height: 200px;
    }

        .room-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 6px 14px rgba(0, 0, 0, 0.2);
        }

    .profile-section {
        display: flex;
        align-items: center;
        margin-top: 1rem;
    }

    .vertical-skill-level-bar {
        display: flex;
        flex-direction: column;
        gap: 2px;
        margin-right: 10px;
        margin-left: -10px;
    }

    .skill-segment {
        width: 25px;
        height: 25px;
        background-color: #e0e0e0;
        border-radius: 2px;
        position: relative;
        transition: background-color 0.3s ease;
    }

        .skill-segment.low {
            background-color: red;
            color: white;
        }

        .skill-segment.medium {
            background-color: orange;
            color: white;
        }

        .skill-segment.high {
            background-color: green;
            color: white;
        }

    .skill-number {
        font-size: 10px;
        color: white;
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        pointer-events: none;
    }

    .profile-image-wrapper {
        position: relative;
        width: 140px;
        height: auto;
        border-radius: 10px;
        overflow: hidden;
        margin-right: 10px;
        text-align: center;
    }

    .profile-image {
        width: 100%;
        height: 140px;
        object-fit: contain;
        border-radius: 10px;
    }

    .game-name {
        margin-top: 0.5rem;
        font-size: 1rem;
        text-align: center;
        font-weight: bold;
    }

    .details-section {
        display: flex;
        flex-direction: column;
        flex-grow: 1;
        margin-top: -2.0rem;
        padding: 0;
    }

    .room-title {
        font-size: 1.5rem;
        font-weight: bold;
        margin: 0;
        text-align: center;
        position: absolute;
        top: 15px;
        left: 50%;
        transform: translateX(-50%);
        width: 100%;
    }

    .location,
    .availability,
    .host,
    .join-type {
        font-size: 0.9rem;
        margin: 0.25rem 0;
    }

    .action-buttons {
        display: flex;
        gap: 0.5rem;
        position: absolute;
        bottom: 5px;
        left: 0;
        right: 0;
        justify-content: center;
    }

    .btn {
        padding: 0.5rem 1rem;
        border-radius: 5px;
        cursor: pointer;
        font-size: 0.9rem;
        font-weight: bold;
        transition: background-color 0.2s ease;
        outline: none !important; /* Usuwa domyślną obwódkę focus */
    }

        .btn:focus, .btn:active {
            outline: none !important; /* Usuwa obwódkę focus */
            box-shadow: none !important; /* Usuwa cień focus */
        }


    .btn-primary {
        background-color: #007bff;
        color: white;
        border: none;
    }

        .btn-primary:hover {
            background-color: #0056b3;
        }

    .btn-join {
        padding: 0.5rem 1.35rem;
        background-color: #28a745;
        color: white;
        border: none;
    }

        .btn-join:hover {
            background-color: #218838;
        }

    .btn-danger {
        background-color: #dc3545;
        color: white;
        border: none;
    }

        .btn-danger:hover {
            background-color: #c82333;
        }

    .btn-disabled {
        background-color: #ccc;
        color: #666;
        border: none;
        cursor: not-allowed;
        padding: 0.5rem 1.35rem;
    }

    .btn-selected {
        background-color: #bbb; /* Keeps the original blue color */
        color: white;
    }

</style>

<h3>Rooms List</h3>

<div>
    <a href="/create-room" class="btn btn-secondary mb-3">
        <i class="fas fa-plus"></i> New Room
    </a>
    <a href="/room-invitations" class="btn btn-secondary mb-3">
        <i class="fas fa-envelope"></i> Invitations (@pendingInvitationsCount)
    </a>
</div>

<div>
    <button class="btn mb-3 @(filterByUserGames ? "btn-selected" : "btn-secondary")"
            @onclick="ToggleUserGamesFilter">
        Show My Games
    </button>
    <button class="btn mb-3 @(filterByReadyToPlay ? "btn-selected" : "btn-secondary")"
            @onclick="ToggleReadyToPlayFilter">
        Show My Ready to Play Games
    </button>
    <button class="btn mb-3 @(hideMyRooms ? "btn-selected" : "btn-secondary")"
            @onclick="ToggleHideMyRooms">
        Hide My Rooms
    </button>
    <button class="btn mb-3 @(showOnlyMyRooms ? "btn-selected" : "btn-secondary")"
            @onclick="ToggleShowOnlyMyRooms">
        Show Only My Rooms
    </button>
    <button class="btn mb-3 @(showParticipantRooms ? "btn-selected" : "btn-secondary")"
            @onclick="ToggleParticipantRoomsFilter">
        Show Participant Rooms
    </button>
</div>
<div>
    <input @bind="searchQuery" placeholder="Search by Game Name or Location" class="form-control mb-3" />
</div>

@if (rooms.Count == 0)
{
    <p>No rooms match your search.</p>
}
else
{
    <div class="room-cards-container">
        @foreach (var room in rooms)
        {
            <div class="room-card">
                <!-- Profile Image and Skill Level Section -->
                <div class="profile-section">
                    <!-- Skill Level Indicator Bar -->
                    <div class="vertical-skill-level-bar">
                        @for (int i = 10; i >= 1; i--)
                        {
                            // Określenie klasy dla segmentu na podstawie poziomu
                            string levelClass = room.SkillLevelRequired switch
                            {
                                <= 3 => "low selected",
                                <= 7 => "medium selected",
                                _ => "high selected"
                            };

                            // Jeśli i > SkillLevelRequired, segment nie będzie aktywny
                            string activeClass = i <= room.SkillLevelRequired ? levelClass : "";

                            <div class="skill-segment @(activeClass)">
                                <span class="skill-number">@i</span>
                            </div>
                        }
                    </div>



                    <div class="profile-image-wrapper">
                        <img class="profile-image" src="@room.MainGameImageUrl" alt="Main Game Image" />
                        <p class="game-name">@room.GameName</p>
                    </div>
                </div>

                <div class="details-section">
                    <h2 class="room-title">@room.RoomName</h2>
                    <p class="location">@room.Localization</p>
                    <p class="availability">
                        <strong>Availability:</strong> @(room.Availability ? "Available" : "Not Available")
                    </p>
                    <p class="host"><strong>Host:</strong> @room.HostName</p>
                    <p class="join-type"><strong>Who Can Join:</strong> @(room.WhoCanJoin ? "Anyone" : "Invite Only")</p>
                    <p class="friends-number">
                        <strong>Friends in Room:</strong> @room.FriendsCount
                    </p>

                    <div class="action-buttons">
                        @if (room.IsUserRoom)
                        {
                            <button class="btn btn-primary" @onclick="() => NavigateToRoom(room.Id)">More</button>
                            <button class="btn btn-primary" @onclick="() => EditRoom(room.Id)">Edit</button>
                            <button class="btn btn-danger" @onclick="() => ShowDeleteModal(room.Id)">Delete Room</button>
                        }
                        else
                        {
                        <button class="btn btn-primary" @onclick="() => NavigateToRoom(room.Id)">More</button>

                        @if (room.IsUserInRoom)
                        {
                            <button class="btn btn-danger" @onclick="() => LeaveRoom(room.Id)">Leave</button>
                        }
                        else
                        {
                            <button class="btn @(room.Availability && room.WhoCanJoin ? "btn-join" : "btn-disabled")"
                                    @onclick="(room.Availability && room.WhoCanJoin) ? (() => JoinRoom(room.Id)) : null"
                                    disabled="@(room.Availability && room.WhoCanJoin ? false : true)">
                                Join
                            </button>
                        }
                        }
                    </div>
                </div>
            </div>
        }
    </div>
    <div style="height: 30px;"></div>
}
<!-- Modal for delete confirmation -->
@if (showDeleteModal)
{
    <div class="modal show" tabindex="-1" style="display: block;" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="close" aria-label="Close" @onclick="CloseDeleteModal">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete the room and all its participants?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseDeleteModal">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmDeleteRoom">Delete</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal-backdrop fade show"></div> <!-- Overlay for modal -->
}


@code {
    private bool filterByReadyToPlay = false;
    private bool filterByUserGames = false;
    private List<RoomModel> rooms = new List<RoomModel>();
    private List<RoomModel> allRooms = new List<RoomModel>();
    private List<UserGameModel> userGames = new List<UserGameModel>();
    private string userId;
    private bool showDeleteModal = false; // Kontroluje widoczność modala
    private int roomIdToDelete; // Przechowuje ID pokoju do usunięcia
    private bool hideMyRooms = false; // Czy ukryć pokoje użytkownika
    private bool showOnlyMyRooms = false; // Czy pokazać tylko pokoje użytkownika
    private bool showParticipantRooms = false; // Czy pokazywać tylko pokoje, w których użytkownik jest uczestnikiem
    private int pendingInvitationsCount = 0; // Liczba zaproszeń

    private string searchQuery
    {
        get => _searchQuery;
        set
        {
            _searchQuery = value;
            FilterRooms(); // Automatyczne filtrowanie po zmianie
        }
    }
    private string _searchQuery = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        await LoadUserGames();
        await LoadRooms();
        await LoadPendingInvitationsCount(); // Załaduj liczbę zaproszeń
    }

    private async Task LoadRooms()
    {
        string sql = @"
SELECT
    r.Id AS Id,
    r.RoomName,
    g.GameName,
    g.Id AS IdGame,
    u.WebUserName AS HostName,
    r.Availability,
    r.Localization,
    r.CreatingDate,
    r.RoomDescription,
    r.SkillLevelRequired,
    r.WhoCanJoin,
    gi.ImageUrl AS MainGameImageUrl,
    r.IdHost,
    (
        SELECT COUNT(*)
        FROM Room_Participants rp
        INNER JOIN Friends f
            ON (f.IdUser1 = rp.IdUser OR f.IdUser2 = rp.IdUser)
        WHERE rp.IdRoom = r.Id
          AND (f.IdUser1 = @UserId OR f.IdUser2 = @UserId)
          AND rp.IdUser != @UserId -- Exclude the current user
    ) +
    (
        CASE
            WHEN r.IdHost != @UserId AND EXISTS (
                SELECT 1
                FROM Friends f
                WHERE (f.IdUser1 = r.IdHost OR f.IdUser2 = r.IdHost)
                  AND (f.IdUser1 = @UserId OR f.IdUser2 = @UserId)
            ) THEN 1 ELSE 0
        END
    ) AS FriendsCount
FROM
    Rooms r
JOIN
    Games g ON r.IdGame = g.Id
JOIN
    AspNetUsers u ON r.IdHost = u.Id
LEFT JOIN
    Game_Image gi ON g.Id = gi.IdGame AND gi.IsMain = 1
";

        allRooms = await _data.LoadData<RoomModel, dynamic>(sql, new { UserId = userId }, _config.GetConnectionString("default"));

        foreach (var room in allRooms)
        {
            room.IsUserRoom = room.IdHost == userId;
            room.IsUserInRoom = await IsUserInRoom(room.Id);
        }

        FilterRooms();
    }



    private async Task LoadUserGames()
    {
        string sql = @"
    SELECT
        ug.Id,
        ug.IdUser,
        ug.IdGame,
        ug.ReadyToPlay,
        ug.SkillLevel
    FROM User_Game ug
    WHERE ug.IdUser = @UserId;
    ";

        userGames = await _data.LoadData<UserGameModel, dynamic>(
            sql,
            new { UserId = userId },
            _config.GetConnectionString("default")
        );

        Console.WriteLine($"Loaded {userGames.Count} user games."); // Sprawdź, ile gier zostało załadowanych
    }

    private void FilterRooms()
    {
        IEnumerable<RoomModel> filteredRooms = allRooms;

        if (filterByUserGames)
        {
            var userGameIds = userGames.Select(ug => ug.IdGame).ToHashSet();
            filteredRooms = filteredRooms.Where(r => userGameIds.Contains(r.IdGame));
        }

        if (filterByReadyToPlay)
        {
            var readyToPlayGameIds = userGames
                .Where(ug => ug.ReadyToPlay)
                .Select(ug => ug.IdGame)
                .ToHashSet();

            filteredRooms = filteredRooms.Where(r => readyToPlayGameIds.Contains(r.IdGame));
        }

        if (hideMyRooms)
        {
            filteredRooms = filteredRooms.Where(r => r.IdHost != userId);
        }

        if (showOnlyMyRooms)
        {
            filteredRooms = filteredRooms.Where(r => r.IdHost == userId);
        }

        if (showParticipantRooms)
        {
            filteredRooms = filteredRooms.Where(r => r.IsUserInRoom);
        }

        if (!string.IsNullOrWhiteSpace(searchQuery))
        {
            var query = searchQuery.ToLower();
            filteredRooms = filteredRooms.Where(r =>
                (r.GameName?.ToLower().Contains(query) ?? false) ||
                (r.Localization?.ToLower().Contains(query) ?? false)
            );
        }

        rooms = filteredRooms.ToList();
        StateHasChanged(); // Odświeżenie UI
    }

    private async Task<bool> IsUserInRoom(int roomId)
    {
        string sql = @"
        SELECT COUNT(1)
        FROM Room_Participants
        WHERE IdRoom = @RoomId AND IdUser = @UserId;
        ";

        var result = await _data.LoadData<int, dynamic>(sql, new { RoomId = roomId, UserId = userId }, _config.GetConnectionString("default"));
        return result.FirstOrDefault() > 0;
    }

    private async Task JoinRoom(int roomId)
    {
        var participant = new
        {
            IdRoom = roomId,
            IdUser = userId,
            JoiningDate = DateTime.Now
        };

        string sql = @"
        INSERT INTO Room_Participants (IdRoom, IdUser, JoiningDate)
        VALUES (@IdRoom, @IdUser, @JoiningDate);
        ";

        await _data.SaveData(sql, participant, _config.GetConnectionString("default"));
        await LoadRooms();
    }

    private async Task LeaveRoom(int roomId)
    {
        var participant = new { IdRoom = roomId, IdUser = userId };

        string sql = @"
        DELETE FROM Room_Participants
        WHERE IdRoom = @IdRoom AND IdUser = @IdUser;
        ";

        await _data.SaveData(sql, participant, _config.GetConnectionString("default"));
        await LoadRooms();
    }

    private async Task DeleteRoom(int roomId)
    {
        try
        {
            // Usuń wszystkich uczestników z pokoju
            string sqlDeleteParticipants = @"
        DELETE FROM Room_Participants WHERE IdRoom = @IdRoom;
        ";
            await _data.SaveData(sqlDeleteParticipants, new { IdRoom = roomId }, _config.GetConnectionString("default"));

            // Usuń sam pokój
            string sqlDeleteRoom = @"
        DELETE FROM Rooms WHERE Id = @IdRoom;
        ";
            await _data.SaveData(sqlDeleteRoom, new { IdRoom = roomId }, _config.GetConnectionString("default"));

            // Odśwież listę pokoi
            await LoadRooms();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting room: {ex.Message}");
            throw;
        }
    }

    private void ShowDeleteModal(int roomId)
    {
        roomIdToDelete = roomId;
        showDeleteModal = true;
    }

    private void CloseDeleteModal()
    {
        showDeleteModal = false;
    }

    private async Task ConfirmDeleteRoom()
    {
        try
        {
            // Usuń wszystkich uczestników z pokoju
            string sqlDeleteParticipants = @"
        DELETE FROM Room_Participants WHERE IdRoom = @IdRoom;
        ";
            await _data.SaveData(sqlDeleteParticipants, new { IdRoom = roomIdToDelete }, _config.GetConnectionString("default"));

            // Usuń sam pokój
            string sqlDeleteRoom = @"
        DELETE FROM Rooms WHERE Id = @IdRoom;
        ";
            await _data.SaveData(sqlDeleteRoom, new { IdRoom = roomIdToDelete }, _config.GetConnectionString("default"));

            // Odśwież listę pokoi
            await LoadRooms();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting room: {ex.Message}");
            throw;
        }
        finally
        {
            showDeleteModal = false; // Zamknij modal po zakończeniu operacji
        }
    }

    private async Task LoadPendingInvitationsCount()
    {
        string sql = @"
            SELECT COUNT(*)
            FROM Room_Invitations
            WHERE IdUser = @UserId AND Status = 'Waiting';
        ";

        var result = await _data.LoadData<int, dynamic>(
            sql,
            new { UserId = userId },
            _config.GetConnectionString("default")
        );

        pendingInvitationsCount = result.FirstOrDefault(); // Pobierz liczbę zaproszeń
        StateHasChanged(); // Odśwież widok
    }

    private void ToggleUserGamesFilter()
    {
        filterByUserGames = !filterByUserGames;
        Console.WriteLine($"Filter by user games: {filterByUserGames}"); // Debug: sprawdź wartość filtra
        FilterRooms();
    }

    private void ToggleReadyToPlayFilter()
    {
        filterByReadyToPlay = !filterByReadyToPlay;
        FilterRooms();
    }

    private void ToggleHideMyRooms()
    {
        hideMyRooms = !hideMyRooms;

        // Jeśli aktywowano "Hide My Rooms", wyłącz "Show Only My Rooms"
        if (hideMyRooms)
        {
            showOnlyMyRooms = false;
        }

        FilterRooms();
    }

    private void ToggleShowOnlyMyRooms()
    {
        showOnlyMyRooms = !showOnlyMyRooms;

        // Jeśli aktywowano "Show Only My Rooms", wyłącz "Hide My Rooms"
        if (showOnlyMyRooms)
        {
            hideMyRooms = false;
        }

        FilterRooms();
    }

    private void ToggleParticipantRoomsFilter()
    {
        showParticipantRooms = !showParticipantRooms;
        FilterRooms(); // Odfiltruj pokoje po zmianie stanu
    }

    private void NavigateToRoom(int roomId)
    {
        Navigation.NavigateTo($"/rooms/{roomId}");
    }
    private void EditRoom(int roomId)
    {
        Navigation.NavigateTo($"/edit-room/{roomId}");
    }
}
