@page "/rooms"
@rendermode InteractiveServer

@using BoardGamesWebsiteWithAuthorization.Models
@using DataLibrary
@using System.Security.Claims
@inject IDataAccess _data
@inject IConfiguration _config
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider

<style>
    .room-cards-container {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(310px, 1fr));
        gap: 1.5rem;
    }

    .room-card {
        position: relative; /* Make the container a positioning context */
        display: flex;
        align-items: center;
        padding: 1.5rem;
        border-radius: 10px;
        background-color: #ffffff;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        min-height: 200px; /* Ensure enough space for content and buttons */
    }

    .room-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 6px 14px rgba(0, 0, 0, 0.2);
    }

    .profile-section {
        display: flex;
        align-items: center;
        margin-top: 1rem; /* Add space above the profile section */
    }

    .vertical-skill-level-bar {
        display: flex;
        flex-direction: column;
        gap: 2px;
        margin-right: 10px;
        margin-left: -10px;
    }

    .skill-segment {
        width: 25px;
        height: 25px;
        background-color: #e0e0e0;
        border-radius: 2px;
        position: relative;
        transition: background-color 0.3s ease;
    }

    .skill-segment.active {
        background-color: #28a745; /* Green for active segments */
    }

    .skill-number {
        font-size: 10px;
        color: white;
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        pointer-events: none; /* Prevent interaction with the number */
    }

    .profile-image-wrapper {
        position: relative;
        width: 140px;
        height: auto; /* Allow height to adjust based on content */
        border-radius: 10px;
        overflow: hidden;
        margin-right: 10px;
        text-align: center; /* Center the game name */
    }

    .profile-image {
        width: 100%;
        height: 140px; /* Keep consistent height for the image */
        object-fit: contain;
        border-radius: 10px; /* Add a border radius to match design */
    }

    .game-name {
        margin-top: 0.5rem;
        font-size: 1rem;
        text-align: center;
        font-weight: bold;
    }


    .details-section {
        display: flex;
        flex-direction: column;
        flex-grow: 1;
        margin-top: -2.0rem; /* Reduce spacing between the image and details */
        padding: 0; /* Remove unnecessary padding */
    }

    .room-title {
        font-size: 1.5rem;
        font-weight: bold;
        margin: 0;
        text-align: center; /* Center the text horizontally */
        position: absolute; /* Position it absolutely within the card */
        top: 15px; /* Adjust distance from the top */
        left: 50%; /* Center horizontally */
        transform: translateX(-50%); /* Offset for centering */
        width: 100%; /* Ensure it spans the width of the card */
    }


    .location,
    .availability,
    .host,
    .join-type {
        font-size: 0.9rem;
        margin: 0.25rem 0;
    }

    /* Action Buttons Section */
    .action-buttons {
        display: flex;
        gap: 0.5rem;
        position: absolute; /* Absolute positioning for consistent placement */
        bottom: 5px; /* Distance from the bottom of the container */
        left: 0; /* Align to the left edge of the container */
        right: 0; /* Ensure buttons are centered horizontally */
        justify-content: center; /* Center the buttons horizontally */
    }

    .btn {
        padding: 0.5rem 1rem;
        border-radius: 5px;
        cursor: pointer;
        font-size: 0.9rem;
        font-weight: bold;
        transition: background-color 0.2s ease;
    }

    .btn-primary {
        background-color: #007bff;
        color: white;
        border: none;
    }

        .btn-primary:hover {
            background-color: #0056b3;
        }

    .btn-join {
        padding: 0.5rem 1.35rem;
        background-color: #28a745;
        color: white;
        border: none;
    }

        .btn-join:hover {
            background-color: #218838;
            color: white;
        }

    .btn-danger {
        background-color: #dc3545;
        color: white;
        border: none;
    }

        .btn-danger:hover {
            background-color: #c82333;
            color: white;
        }

    .btn-delete {
        background-color: #dc3545;
        color: white;
        border: none;
    }

        .btn-delete:hover {
            background-color: #c82333;
            color: white;
        }

    .btn-disabled {
        background-color: #ccc; /* Light gray color */
        color: #666; /* Darker gray for text */
        border: none;
        cursor: not-allowed; /* Change cursor to indicate non-clickable */
        padding: 0.5rem 1.35rem;
    }

</style>

<h3>Rooms List</h3>

<a href="/create-room" class="btn btn-secondary mb-3">
    <i class="fas fa-arrow-left"></i> New Room
</a>

<div class="room-cards-container">
    @foreach (var room in rooms)
    {
        <div class="room-card">
            <!-- Profile Image and Skill Level Section -->
            <div class="profile-section">
                <!-- Skill Level Indicator Bar (Vertical) -->
                <div class="vertical-skill-level-bar">
                    @for (int i = 10; i >= 1; i--)
                    {
                        <div class="skill-segment @(i <= room.SkillLevelRequired ? "active" : "")">
                            <span class="skill-number">@i</span>
                        </div>
                    }
                </div>

                <!-- Profile Image and Game Name Section -->
                <div class="profile-image-wrapper">
                    <img class="profile-image" src="@room.MainGameImageUrl" alt="Main Game Image" />
                    <p class="game-name">@room.GameName</p> <!-- Game name directly below image -->
                </div>
            </div>


            <!-- Room Details Section -->
            <div class="details-section">
                <h2 class="room-title">@room.RoomName</h2>
                <p class="location">@room.Localization</p>
                <p class="availability">
                    <strong>Availability:</strong> @(room.Availability ? "Available" : "Not Available")
                </p>
                <p class="host"><strong>Host:</strong> @room.HostName</p>
                <p class="join-type"><strong>Who Can Join:</strong> @(room.WhoCanJoin ? "Anyone" : "Invite Only")</p>

                <!-- Action Buttons -->
                <div class="action-buttons">
                    @if (room.IsUserRoom)
                    {
                        <button class="btn btn-primary" @onclick="() => NavigateToRoom(room.Id)">More</button>
                        <button class="btn btn-primary" @onclick="() => EditRoom(room.Id)">Edit</button>
                        <button class="btn btn-delete" @onclick="() => DeleteRoom(room.Id)">Delete Room</button>
                    }
                    else
                    {
                        <button class="btn btn-primary" @onclick="() => NavigateToRoom(room.Id)">More</button>

                        @if (room.IsUserInRoom)
                        {
                            <button class="btn btn-danger" @onclick="() => LeaveRoom(room.Id)">Leave</button>
                        }
                        else
                        {
                            <button class="btn @(room.Availability && room.WhoCanJoin ? "btn-join" : "btn-disabled")"
                                    @onclick="(room.Availability && room.WhoCanJoin) ? (() => JoinRoom(room.Id)) : null"
                                    disabled="@(room.Availability && room.WhoCanJoin ? false : true)">
                                Join
                            </button>
                        }
                    }
                </div>
            </div>
        </div>
    }
</div>

@code {
    private List<RoomModel> rooms = new List<RoomModel>();
    private string userId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        await LoadRooms();
    }

    private async Task LoadRooms()
    {
        string sql = @"
        SELECT
            r.Id AS Id,
            r.RoomName,
            g.GameName,
            u.WebUserName AS HostName,
            r.Availability,
            r.Localization,
            r.CreatingDate,
            r.RoomDescription,
            r.SkillLevelRequired,
            r.WhoCanJoin,
            gi.ImageUrl AS MainGameImageUrl,
            r.IdHost
        FROM
            Rooms r
        JOIN
            Games g ON r.IdGame = g.Id
        JOIN
            AspNetUsers u ON r.IdHost = u.Id
        LEFT JOIN
            Game_Image gi ON g.Id = gi.IdGame AND gi.IsMain = 1
        ";

        rooms = await _data.LoadData<RoomModel, dynamic>(sql, new { }, _config.GetConnectionString("default"));

        foreach (var room in rooms)
        {
            room.IsUserRoom = room.IdHost == userId;
            room.IsUserInRoom = await IsUserInRoom(room.Id);
        }

        rooms = rooms.OrderByDescending(r => r.IsUserRoom).ToList();
    }

    private async Task<bool> IsUserInRoom(int roomId)
    {
        string sql = @"
        SELECT COUNT(1)
        FROM Room_Participants
        WHERE IdRoom = @RoomId AND IdUser = @UserId;
        ";

        var result = await _data.LoadData<int, dynamic>(sql, new { RoomId = roomId, UserId = userId }, _config.GetConnectionString("default"));
        return result.FirstOrDefault() > 0;
    }

    private async Task JoinRoom(int roomId)
    {
        var participant = new
        {
            IdRoom = roomId,
            IdUser = userId,
            JoiningDate = DateTime.Now
        };

        string sql = @"
        INSERT INTO Room_Participants (IdRoom, IdUser, JoiningDate)
        VALUES (@IdRoom, @IdUser, @JoiningDate);
        ";

        await _data.SaveData(sql, participant, _config.GetConnectionString("default"));
        await LoadRooms();
    }

    private async Task LeaveRoom(int roomId)
    {
        var participant = new { IdRoom = roomId, IdUser = userId };

        string sql = @"
        DELETE FROM Room_Participants
        WHERE IdRoom = @IdRoom AND IdUser = @IdUser;
        ";

        await _data.SaveData(sql, participant, _config.GetConnectionString("default"));
        await LoadRooms();
    }

    private async Task DeleteRoom(int roomId)
    {
        var roomToDelete = new { IdRoom = roomId };

        string sql = @"
        DELETE FROM Rooms WHERE Id = @IdRoom;
        ";

        await _data.SaveData(sql, roomToDelete, _config.GetConnectionString("default"));
        await LoadRooms();
    }

    private void NavigateToRoom(int roomId)
    {
        Navigation.NavigateTo($"/rooms/{roomId}");
    }
    private void EditRoom(int roomId)
    {
        Navigation.NavigateTo($"/edit-room/{roomId}");
    }

}
