@page "/rooms"
@rendermode InteractiveServer

@using BoardGamesWebsiteWithAuthorization.Models
@using DataLibrary
@using System.Security.Claims
@inject IDataAccess _data
@inject IConfiguration _config
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider

<style>
    /* Container for the Room Cards */
    .room-cards-container {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        gap: 1rem;
    }

    /* General Card Styling */
    .room-card {
        border: 1px solid #ddd;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

        .room-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
        }

        /* Card Image Styling */
        .room-card img.card-img-top {
            width: 100%;
            max-height: 200px;
            object-fit: contain;
            border-radius: 5px;
            margin-bottom: 10px;
            background-color: white;
        }

        /* Card Title */
        .room-card .card-title {
            font-size: 1.25rem;
            font-weight: bold;
            margin-bottom: 0.5rem;
        }

        /* Card Text */
        .room-card .card-text {
            font-size: 0.9rem;
            color: #555;
        }

        /* Button Styling */
        .room-card .btn-primary {
            background-color: #007bff;
            border: none;
            transition: background-color 0.2s ease;
        }

            .room-card .btn-primary:hover {
                background-color: #0056b3;
            }

        .room-card .btn-join {
            background-color: #28a745;
            border: none;
            transition: background-color 0.2s ease;
        }

            .room-card .btn-join:hover {
                background-color: #218838;
            }
</style>

<h3>Rooms List</h3>

<!-- Button to go back to the games page -->
<a href="/games" class="btn btn-secondary mb-3">
    <i class="fas fa-arrow-left"></i> Back to Games
</a>

<!-- Rooms Grid Layout -->
<div class="room-cards-container">
    @foreach (var room in rooms)
    {
        <div class="room-card card">
            <img class="card-img-top" src="@room.MainGameImageUrl" alt="Main Game Image" />

            <div class="card-body">
                <h5 class="card-title">@room.RoomName</h5>
                <p class="card-text"><strong>Game:</strong> @room.GameName</p>
                <p class="card-text"><strong>Host:</strong> @room.HostName</p>
                <p class="card-text"><strong>Location:</strong> @room.Localization</p>
                <p class="card-text"><strong>Skill Level:</strong> @room.SkillLevelRequired</p>
                <p class="card-text"><strong>Who Can Join:</strong> @(room.WhoCanJoin ? "Anyone" : "Invite Only")</p>
                <p class="card-text"><strong>Availability:</strong> @(room.Availability ? "Available" : "Not Available")</p>

                @if (!string.IsNullOrEmpty(room.RoomDescription))
                {
                    <p class="card-text"><strong>Description:</strong> @room.RoomDescription</p>
                }

                <button class="btn btn-primary" @onclick="() => NavigateToRoom(room.Id)">View Room</button>
                <button class="btn btn-join" @onclick="() => JoinRoom(room.Id)">Join Room</button>
            </div>
        </div>
    }

</div>

@code {
    private List<RoomModel> rooms = new List<RoomModel>();
    private string userId;

    protected override async Task OnInitializedAsync()
    {
        // Get the authentication state and logged-in user ID
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        // Check if userId is null or empty (for debugging purposes)
        if (string.IsNullOrEmpty(userId))
        {
            Console.WriteLine("User ID is not found!");
        }

        // Load rooms from the database, excluding rooms created by the logged-in user
        await LoadRooms();
    }

    private async Task LoadRooms()
    {
        // SQL query excluding rooms where the logged-in user is the host
        string sql = @"
        SELECT
    r.Id AS Id,  -- Ensure the alias is 'Id' for direct mapping
    r.RoomName,
    g.GameName,
    u.WebUserName AS HostName,
    r.Availability,
    r.Localization,
    r.CreatingDate,
    r.RoomDescription,
    r.SkillLevelRequired,
    r.WhoCanJoin,
    gi.ImageUrl AS MainGameImageUrl
FROM
    Rooms r
JOIN
    Games g ON r.IdGame = g.Id
JOIN
    AspNetUsers u ON r.IdHost = u.Id
LEFT JOIN
    Game_Image gi ON g.Id = gi.IdGame AND gi.IsMain = 1
WHERE
    r.IdHost != @UserId;
    ";

        rooms = await _data.LoadData<RoomModel, dynamic>(sql, new { UserId = userId }, _config.GetConnectionString("default"));

        // Log the results to see if Id is populated correctly
        foreach (var room in rooms)
        {
            Console.WriteLine($"Room Id: {room.Id}, Room Name: {room.RoomName}");
        }

    }


    private async Task JoinRoom(int roomId)
    {
        // Log roomId and userId before insertion
        Console.WriteLine($"Joining room with RoomId: {roomId}, UserId: {userId}");

        if (roomId <= 0)
        {
            Console.WriteLine("Invalid RoomId, cannot join room.");
            return;
        }

        // Create a participant object for the Room_Participants table
        var participant = new
        {
            IdRoom = roomId,
            IdUser = userId,
            JoiningDate = DateTime.Now
        };

        string sql = @"
        INSERT INTO Room_Participants (IdRoom, IdUser, JoiningDate)
        VALUES (@IdRoom, @IdUser, @JoiningDate);
    ";

        try
        {
            await _data.SaveData(sql, participant, _config.GetConnectionString("default"));
            await LoadRooms();  // Reload the room list after joining
            Console.WriteLine("Successfully joined the room.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error joining the room: {ex.Message}");
        }
    }


    private void NavigateToRoom(int roomId)
    {
        Navigation.NavigateTo($"/rooms/{roomId}");
    }
}
