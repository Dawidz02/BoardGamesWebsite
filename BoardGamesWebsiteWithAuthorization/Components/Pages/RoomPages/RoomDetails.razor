@page "/rooms/{roomId:int}"
@rendermode InteractiveServer

@using BoardGamesWebsiteWithAuthorization.Models
@using DataLibrary
@inject IDataAccess _data
@inject IConfiguration _config
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider

<style>
    .room-container {
        display: flex;
        gap: 2rem; /* Odstęp między kolumnami */
        justify-content: center;
        align-items: flex-start;
    }

        .room-container.two-columns {
            justify-content: space-between; /* Dwie kolumny rozdzielone */
        }

    .room-details, .friends-details {
        flex: 1; /* Obie kolumny zajmują równą przestrzeń */
        padding: 2rem;
        background-color: #f9f9f9;
        border-radius: 10px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        max-width: 50%; /* Połowa szerokości */
    }

    .room-container.centered .room-details {
        max-width: 600px; /* Środek strony */
    }

    .friends-details {
        max-width: 50%; /* Połowa szerokości */
    }

    .user-container {
        display: flex;
        flex-wrap: wrap;
        justify-content: flex-start;
        gap: 1rem;
    }

    .user-box {
        width: 250px;
        border-radius: 10px;
        background: #ffffff;
        color: #333;
        padding: 15px;
        text-align: center;
        display: flex;
        flex-direction: column;
        align-items: center;
        margin: 10px;
        border: 1px solid #e0e0e0;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);
        transition: transform 0.3s ease;
    }

        .user-box:hover {
            transform: translateY(-5px);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
        }

        .user-box img {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            object-fit: cover;
            margin-bottom: 10px;
            border: 2px solid #e0e0e0;
        }

    .card-title {
        font-weight: bold;
        font-size: 16px;
        margin: 5px 0;
        color: #333;
    }

    .card-text {
        font-size: 14px;
        margin: 5px 0;
        color: #777;
    }
</style>

<h3>Room Details</h3>

@if (room == null)
{
    <p><em>Loading room details...</em></p>
}
else
{
    <div class="room-container @(room.IdHost == loggedInUserId ? "two-columns" : "centered")">
        <!-- Szczegóły pokoju -->
        <div class="room-details">
            <h2>@room.RoomName</h2>
            <p><strong>Game:</strong> @room.GameName</p>
            <p>
                <strong>Host:</strong>
                <span style="color: @(friendIds.Contains(room.IdHost) ? "green" : "black")">
                    @room.HostName
                </span>
            </p>
            <p><strong>Location:</strong> @room.Localization</p>
            <p><strong>Availability:</strong> @(room.Availability ? "Available" : "Not Available")</p>
            <p><strong>Who Can Join:</strong> @(room.WhoCanJoin ? "Anyone" : "Invite Only")</p>
            <p><strong>Skill Level Required:</strong> @room.SkillLevelRequired</p>
            <p><strong>Description:</strong> @room.RoomDescription</p>

            <h4>Participants</h4>
            <ul>
                <li style="color: @(friendIds.Contains(room.IdHost) ? "green" : "black")">
                    @room.HostName (Host)
                </li>
            </ul>
            @if (participants == null || !participants.Any())
            {
            }
            else
            {
                <ul>
                    @foreach (var participant in participants)
                    {
                        <li style="color: @(friendIds.Contains(participant.Id) ? "green" : "black")">
                            @participant.UserName (@participant.Name @participant.SecondName)
                            @if (room.IdHost == loggedInUserId)
                            {
                                <button class="btn btn-sm btn-danger" style="margin-left: 10px;"
                                        @onclick="() => RemoveParticipant(participant.Id)">
                                    &times;
                                </button>
                            }
                        </li>
                    }
                </ul>
            }
            <button class="btn btn-secondary" @onclick="GoBack">Back to Rooms</button>
        </div>

        <!-- Lista znajomych -->
        @if (room.IdHost == loggedInUserId)
        {
            <div class="friends-details">
                <h4>Your Friends</h4>
                @if (friends == null || !friends.Any())
                {
                    <p>You don't have any friends yet.</p>
                }
                else
                {
                    <div class="user-container">
                        @foreach (var friend in friends)
                        {
                            <div class="user-box">
                                <img src="@(!string.IsNullOrEmpty(friend.UserPhoto) ? friend.UserPhoto : "path/to/default-image.jpg")" alt="User Photo" />
                                <div class="card-title">@friend.WebUserName</div>
                                <div class="card-text">
                                    <span>@friend.Name</span>
                                    <span>@friend.SecondName</span>
                                </div>
                                @if (invitedOrParticipatingUserIds.Contains(friend.Id) && !participants.Any(p => p.Id == friend.Id))
                                {
                                    <!-- Przy zaproszeniu oczekującym na akceptację -->
                                    <div style="display: flex; gap: 5px;">
                                        <button class="btn btn-primary" disabled>Already Invited</button>
                                        <button class="btn btn-sm btn-danger" @onclick="() => CancelInvitation(friend.Id)">
                                            &times;
                                        </button>
                                    </div>
                                }
                                else if (invitedOrParticipatingUserIds.Contains(friend.Id))
                                {
                                    <button class="btn btn-primary" disabled>Already Joined</button>
                                }
                                else
                                {
                                    <button class="btn btn-primary" @onclick="() => InviteFriend(friend.Id)">Invite</button>
                                }
                            </div>
                        }
                    </div>
                }
            </div>
        }
    </div>
}


@code {
    [Parameter] public int roomId { get; set; }
    private RoomModel room = new RoomModel();
    private List<UserModel> participants = new List<UserModel>();
    private List<UserModel> friends = new List<UserModel>(); // Znajomi
    private HashSet<string> friendIds = new HashSet<string>();
    private HashSet<string> invitedOrParticipatingUserIds = new HashSet<string>(); // Id użytkowników z zaproszeniami lub w pokoju
    private string loggedInUserId;

    protected override async Task OnInitializedAsync()
    {
        loggedInUserId = await GetLoggedInUserId();
        await LoadFriends();
        await LoadRoomDetails();
        await LoadParticipants();
        await LoadInvitedOrParticipatingUsers();
    }

    private async Task<string> GetLoggedInUserId()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        return authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
    }

    private async Task LoadFriends()
    {
        string sql = @"
        SELECT
            u.Id,
            u.WebUserName,
            u.Name,
            u.SecondName,
            u.UserPhoto -- Dodanie kolumny UserPhoto
        FROM Friends f
        JOIN AspNetUsers u
            ON (f.IdUser1 = u.Id AND f.IdUser2 = @UserId)
            OR (f.IdUser2 = u.Id AND f.IdUser1 = @UserId)
    ";

        friends = await _data.LoadData<UserModel, dynamic>(
            sql,
            new { UserId = loggedInUserId },
            _config.GetConnectionString("default")
        );

        friendIds = friends.Select(f => f.Id).ToHashSet();
    }

    private async Task LoadRoomDetails()
    {
        string sql = @"
            SELECT
                r.Id AS Id,
                r.RoomName,
                g.GameName,
                u.Id AS IdHost,
                u.WebUserName AS HostName,
                r.Availability,
                r.Localization,
                r.CreatingDate,
                r.RoomDescription,
                r.SkillLevelRequired,
                r.WhoCanJoin,
                gi.ImageUrl AS MainGameImageUrl
            FROM Rooms r
            JOIN Games g ON r.IdGame = g.Id
            JOIN AspNetUsers u ON r.IdHost = u.Id
            LEFT JOIN Game_Image gi ON g.Id = gi.IdGame AND gi.IsMain = 1
            WHERE r.Id = @RoomId;
        ";

        var result = await _data.LoadData<RoomModel, dynamic>(
            sql,
            new { RoomId = roomId },
            _config.GetConnectionString("default")
        );
        if (result != null && result.Count > 0)
        {
            room = result.First();
        }
    }

    private async Task LoadParticipants()
    {
        string sql = @"
            SELECT
                u.Id,
                u.WebUserName AS UserName,
                u.Email,
                u.Name,
                u.SecondName
            FROM Room_Participants rp
            JOIN AspNetUsers u ON rp.IdUser = u.Id
            WHERE rp.IdRoom = @RoomId;
        ";

        participants = await _data.LoadData<UserModel, dynamic>(
            sql,
            new { RoomId = roomId },
            _config.GetConnectionString("default")
        );
    }

    private async Task LoadInvitedOrParticipatingUsers()
    {
        string sql = @"
        SELECT DISTINCT IdUser
        FROM Room_Invitations
        WHERE IdRoom = @RoomId AND Status = 'Waiting'
        UNION
        SELECT DISTINCT IdUser
        FROM Room_Participants
        WHERE IdRoom = @RoomId;
    ";

        var result = await _data.LoadData<string, dynamic>(
            sql,
            new { RoomId = roomId },
            _config.GetConnectionString("default")
        );

        invitedOrParticipatingUserIds = result.ToHashSet();
    }

    private async Task InviteFriend(string friendId)
    {
        var invitation = new
        {
            IdRoom = roomId,
            IdUser = friendId,
            InvitedBy = loggedInUserId,
            Status = "Waiting",
            SendingDate = DateTime.Now
        };

        string sql = @"
        INSERT INTO Room_Invitations (IdRoom, IdUser, InvitedBy, Status, SendingDate)
        VALUES (@IdRoom, @IdUser, @InvitedBy, @Status, @SendingDate);
        ";

        await _data.SaveData(sql, invitation, _config.GetConnectionString("default"));
        await LoadInvitedOrParticipatingUsers(); // Odśwież dane po zaproszeniu
    }

    private async Task RemoveParticipant(string participantId)
    {
        try
        {
            string sql = @"
        DELETE FROM Room_Participants
        WHERE IdRoom = @RoomId AND IdUser = @ParticipantId;
        ";

            await _data.SaveData(sql, new { RoomId = roomId, ParticipantId = participantId }, _config.GetConnectionString("default"));

            await LoadParticipants();
            await LoadInvitedOrParticipatingUsers();

            StateHasChanged(); 
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error removing participant: {ex.Message}");
        }
    }

    private async Task CancelInvitation(string userId)
    {
        try
        {
            string sql = @"
            DELETE FROM Room_Invitations
            WHERE IdRoom = @RoomId AND IdUser = @UserId AND Status = 'Waiting';
        ";

            await _data.SaveData(sql, new { RoomId = roomId, UserId = userId }, _config.GetConnectionString("default"));

            // Odśwież listę znajomych i zaproszeń
            await LoadInvitedOrParticipatingUsers();

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error cancelling invitation: {ex.Message}");
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/rooms");
    }
}
